name: Backend
on:
  push:
    branches:
      - "**"
env:
  AWS_REGION: "eu-central-1"
  ECR_REPOSITORY: "dns-backend"
  ECS_SERVICE: "dns-backend"
  ECS_CLUSTER: "dns"
  ECS_TASK_DEFINITION: "dns-backend"
  CONTAINER_NAME: "dns-backend"
jobs:
  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10.4"
      - name: Install Black, Isort, Flake8, Bandit
        run: pip install black isort flake8 bandit
      - name: Check formating with Black, Isort, Flake8
        run: >-
          black .;
          isort;
          flake8 backend/*.py
      - name: Check security issues with bandit
        run: bandit -r -x /backend/app/tests .
  tests:
    needs: linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build docker
        run: docker build --tag=dns-backend:latest ./backend/
      - name: Run tests
        run: docker run dns-backend:latest bash -c "poetry install --no-root && poetry run pytest -vv -s" && exit
  deploy:
    needs: tests
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG ./backend/
          docker push $ECR_REGISTRY:$IMAGE_TAG 
          echo ::set-output name=image::$ECR_REGISTRY:$IMAGE_TAG

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true